// Import from Bulma vars and mixin
// I need $breakpoints map and breakpoint mixins
@import "../node_modules/bulma/sass/utilities/initial-variables.sass";
@import "../node_modules/bulma/sass/utilities/mixins";

// These vars are declared in 'bulma/sass/helpers/spacing.sass'
// @import "../node_modules/bulma/sass/helpers/spacing";
$spacing-shortcuts        : ("margin": "m", "padding": "p") !default;
$spacing-directions       : ("top": "t", "right": "r", "bottom": "b", "left": "l") !default;
$spacing-horizontal       : "x" !default;
$spacing-vertical         : "y" !default;
$spacing-values           : ("0": 0, "1": 0.25rem, "2": 0.5rem, "3": 0.75rem, "4": 1rem, "5": 1.5rem, "6": 3rem, "auto": auto) !default;

// Extend Bulma breakpoints
$mobile-md                : 480px !default;
$mobile-lg                : 600px !default;
$my-breakpoints           : (
	"mobile-xs" : (
		"until" : $mobile-md
	),
	"mobile-md" : (
		"from" : $mobile-md
	),
	"mobile-lg": (
		"from" : $mobile-lg
	)
);

$breakpoints              : map-merge($breakpoints, $my-breakpoints);

// Choose which breakpoint to make responsive.
// If you don't need some of them, just remove it from the list.
$breakpoint-to-responsify : (
	"mobile": true,
	"tablet": true,
	"table-only": true,
	"touch": true,
	"desktop": true,
	"desktop-only": true,
	"until-widescreen": $widescreen-enabled,
	"widescreen": $widescreen-enabled,
	"widescreen-only": $widescreen-enabled,
	"until-fullhd": $fullhd-enabled,
	"fullhd": $fullhd-enabled,
	"mobile-xs": true,
	"mobile-md": true,
	"mobile-lg": true,
);

// Enable or disable the making of specific classes
// "globally-enabled" overrides all specific values
$allowed-space            : (
	"margin": (
		"globally-enabled": true,
		"x": true,
		"y": true,
		"top": true,
		"right": true,
		"bottom": true,
		"left": true,
		"0": true,
		"1": true,
		"2": true,
		"3": true,
		"4": true,
		"5": true,
		"6": true,
		"auto": true,
	),
	"padding": (
		"globally-enabled": true,
		"x": true,
		"y": true,
		"top": true,
		"right": true,
		"bottom": true,
		"left": true,
		"0": true,
		"1": true,
		"2": true,
		"3": true,
		"4": true,
		"5": true,
		"6": true,
		"auto": true,
	),
);

// Get value from $allowed-space map
@function is-allowed($spacing, $value) {
	@return map-get(map-get($allowed-space, $spacing), $value);
}

// Loop through $spacing-shortcuts, $spacing-values and $spacing-directions
// in "helpers/spacings.sass" to make the responsive classes
@mixin loop-spacings($bp-name) {
	// Loop through "margin" and "padding"
	@each $property, $shortcut in $spacing-shortcuts {
		// Check if margin or padding is enabled
		@if is-allowed($property, "globally-enabled") {
			// Loop through spacing values 0, 1, 2, 3, 4, 5, 6, auto
			@each $name, $value in $spacing-values {
				// Check if value is enabled
				@if is-allowed($property, $name) {
					// Make classes .m-1 etc
					.#{$shortcut}-#{$name}-#{$bp_name} {
						#{$property}: $value !important
					}
					// Make classes .mx-1 etc
					@if $spacing-horizontal != null and is-allowed($property, "x") {
						.#{$shortcut}#{$spacing-horizontal}-#{$name}-#{$bp_name} {
							#{$property}-left  : $value !important;
							#{$property}-right : $value !important;
						}
					}
					// Make classes .my-1 etc
					@if $spacing-vertical != null and is-allowed($property, "y") {
						.#{$shortcut}#{$spacing-vertical}-#{$name}-#{$bp_name} {
							#{$property}-top    : $value !important;
							#{$property}-bottom : $value !important;
						}
					}
					// Loop through "top", "right", "bottom", "left"
					@each $direction, $suffix in $spacing-directions {
						// Check if direction is enabled
						@if is-allowed($property, $direction) {
							// Make classes .mt-5-desktop etc
							.#{$shortcut}#{$suffix}-#{$name}-#{$bp_name} {
								#{$property}-#{$direction}: $value !important;
							}
						}
					}
				}
			}
		}
	}
}

// Loop through each breakpoint and, if enabled, make responsive classes
@each $bp_name, $bp_map in $breakpoints {
	@if map-get($breakpoint-to-responsify, $bp_name) {
		@include breakpoint($bp_name) {
			@include loop-spacings($bp_name);
		}
	}
}
